---
title: "Prime ministers of New Zealand"
subtitle: "STA302 Mini essay 5a: Web Scrapping"
author: Brandon Benson
format: pdf
date: today
---

Github repo: <https://github.com/brndnjbenson/New_Zealand_PMs_lifespan.git>

------------------------------------------------------------------------

#### [Data Source]{.underline}

The data source containts all of the administered Prime Ministered of New Zealand, obtained from Wikipedia where the data are presented in a table form. Using SelectorGadget which is included in rvest, the data is web scrapped into R with package xml2 and rvest, which then read_html() is used followed by html_element() to extract the desired data from Wikipedia.

Along with the names of the Prime Ministers, the data also includes the number order of Prime Minister, details of Constituency, Election and Parliament information, term of office, political party, and government details for each listed Prime Minister.

After importing the data set which includes all of the columns named parse_data_selector_gadget, the data are then organized using html_table(), and the process of data cleaning then followed.

#### [Data]{.underline}

```{r}
#| eval: true
#| warning: false
#| echo: false

install.packages("babynames")
install.packages("xml2")
```

```{r}
#| eval: true
#| warning: false
#| echo: false
library(tidyverse)
library(rvest)
library(babynames)
library(xml2)
library(janitor)
library(tidyr)
library(dplyr)
library(knitr)
```

```{r}
#| eval: true
#| warning: false
#| echo: false


# Start with simualtion of data
set.seed(432)

sim_data <- tibble(
  prime_minister = babynames %>% 
    filter(prop > 0.01) %>% 
    distinct(name) %>% 
    unlist() %>% 
    sample(10, FALSE),
  birth_year = sample(1700:1900, 10, TRUE),
  life_span = sample(50:100, 10, TRUE),
  death_year = birth_year + life_span
) %>% 
  select(prime_minister, birth_year, death_year, life_span) %>% 
  arrange(birth_year)

```

```{r}
#| eval: true
#| warning: false
#| echo: false

# importing raw data from Wikipedia

raw_data <- read_html("https://en.wikipedia.org/wiki/List_of_prime_ministers_of_New_Zealand")

write_html(raw_data, "NZPms.html")

raw_data <- read_html("NZPms.html")


```

```{r}
#| eval: true
#| warning: false
#| echo: false
parse_data_selector_gadget <- raw_data %>% 
  html_element("td , #mw-content-text , caption, .wikitable th") %>% 
  html_table() 


```

```{r}
#| eval: true
#| warning: false
#| echo: false

# Data cleaning

# colnames(parse_data_selector_gadget)

# Focusing on columns that we need as there are too many unwanted data

parsed_data <- parse_data_selector_gadget %>% 
  clean_names() %>% 
  rename( raw_text = name_constituency_birth_death ) %>% 
  select(raw_text) %>% 
  filter(raw_text != "NameConstituency(Birth–Death)") %>% 
  distinct()

parsed_data <- head(parsed_data, -3)


# Now we have only the parsed data of what we want; the names of PMs and their birth and death year column.
  
```

```{r}
#| eval: true
#| warning: false
#| echo: false

# Cont. with data cleaning; we want just the name and the birth and death year in the parsed data.

initial_clean <- parsed_data %>% 
  separate(raw_text, into = c("name", "not_name"), sep = "MP for", extra = "merge") %>% 
  mutate(name = gsub("The| Right| Honourable", "", name)) %>% 
  mutate(name = gsub("GCMG| CMG|KCMG", "", name)) %>% 
  mutate(name = gsub("Councillor|Bt| KCB|MC", "", name)) %>% 
  mutate(name = gsub("Bt|KCB|CH|QSOKStJ|GBE", "", name)) %>% 
  mutate(name = gsub("ONZ|AC|AO|DNZM|SSI|GNZM|KNZM|ED|KG", "", name)) %>% 
  mutate(name = gsub("GNZ|KNZList|KC|DNZ|JP|","", name)) %>% 
  mutate(name = gsub("List MP","", name)) %>% 
  mutate(name = gsub("\\([^)]+\\)","", name)) %>% 
  mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}")) %>% 
  mutate(born = str_extract(not_name, "born[[:space:]][[:digit:]]{4}")) %>% 
  select(name, date, born)

# Notice some rows have NA values for both columns, so we manually enter the data to fill up the rows

initial_clean2 <- initial_clean %>% 
  mutate(
    date = ifelse(name == "Sir Frederick Whitaker" & is.na(date), "1812–1891", date),
    date = ifelse(name == "George Waterhouse" & is.na(date), "1824–1906", date),
    date = ifelse(name == "Daniel Pollen" & is.na(date), "1813–1896", date),
    date = ifelse(name == "Francis Bell" & is.na(date), "1851–1936", date),
    born = ifelse(name == "Sir Bill English" & is.na(born), "born 1961", born)
    )


# Now we have name, and the data of alive or year of birth
```

```{r}
#| eval: true
#| warning: false
#| echo: false
#| label: tbl-docvisittable
#| tbl-cap: New Zealand Prime Ministers, arranged in the order of administration. , and their Birth year and how long have they lived until the year they died.


# Clean up the columns, separate the birth and death year, and make a life span column

cleaned_data <- initial_clean2 %>% 
  separate(date, into = c("birth", "died"), sep = "–") %>% 
  mutate(born = str_remove_all(born, "born[[:space:]]"),
         birth = if_else(!is.na(born), born, birth)) %>% 
  select(-born) %>% 
  rename(born = birth) %>% 
  mutate(across(c(born, died), as.integer)) %>% 
  mutate(Lifespan = died - born) %>% 
  distinct()

cleaned_data <- cleaned_data[-13 , ]
  
kable(cleaned_data,
      col.names = c("Prime Minister", "Birth Year", "Death Year", "Life Span")) 

```

```{r}
#| eval: true
#| warning: false
#| echo: false
#| label: fig-doctorgraphs
#| fig-cap: "The Lifespan of every New Zealand Prime Ministers, with names of Prime Minister arranged from bottom to top in order of administration."


# Making graph illustrating the lifespan of each Prime Ministers

cleaned_data %>% 
  mutate(still_alive = if_else(is.na(died), "Yes", "No"),
         died = if_else(is.na(died), as.integer(2023), died)) %>% 
  mutate(name = factor(name, unique(cleaned_data$name))) %>% 
  ggplot(aes(x=born, xend=died, y=name, yend=name, color = still_alive)) +
  geom_segment() +
  labs(x = "Year of birth", y = "Prime minister", color = "Curretly Alive PM") +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom") +
  theme(
    axis.text.y.left = element_text(hjust = 1, size = 6)
  )
```

Table 1 shows lifespan or ages of all Prime Ministers administered for the country New Zealand since the establishment of the nation, including their birth and death year. There has been a total of 43 Prime Ministers in New Zealand's political history, with the first Prime Minister Henry Sewell born in the early 1800s. This is the earliest birth year for a Prime Minister, whilst on the other hand respectively to the current year, Dame Jacinda Ardern is born the latest out of the other Prime Ministers on year 1980, and also the youngest at 43 years old. Looking at the life span of the Prime Ministers, there are three individuals with the longest lifespan at 86 years old. These include Sir George Grey, Sir Robert Stout, and Sir Walter Nash, all born in the 1800s.

With Figure 1, we can observe the distribution pattern of the Prime Ministers lifespan over time, where the red colored data marks those have passed and blue for those who are still alive. The most prominent observation in Figure 1 is that there are significantly more dead Prime Ministers than the alive ones. Using Table 1, only 9 Prime Ministers are currently alive, with the oldest being Jim Bolger in 1935. The remaining Prime Ministers whom are dead has life span in the range of 50 to 80 years. All of the alive individuals are born 1930s and over, but they are not all the latest administered Prime Ministers. In the last 10 administrations, 1 out of 10 Prime Ministers died which is Mike Moore in 2020. Sir Geoffrey Palmer is the earliest Prime Ministers to not have died yet. Just over a half of New Zealand Prime Ministers are born before the 1900s, and are all dead. All of the alive Prime Ministers are born after 1950s in Figure 1, and only 11 Prime Ministers made it after the year 2000.

#### [Data Source]{.underline}

The data source containts all of the administered Prime Ministered of New Zealand, obtained from Wikipedia where the data are presented in a table form. Using SelectorGadget, the data is web scrapped into R with package xml2 and rvest, which then read_html() is used followed by html_element() to extract the desired data from Wikipedia.

Along with the names of the Prime Ministers, the data also includes the number order of Prime Minister, details of Constituency, Election and Parliament information, term of office, political party, and government details for each listed Prime Minister.

After importing the data set which includes all of the columns named parse_data_selector_gadget, the data are then organized using html_table(), and the process of data cleaning then followed.

#### [Reflections]{.underline}

The part which took the longest is figuring out how to use the tool SelectorGadget in helping with web scrapping. In some times, it became a trial and error process but eventually, all the needed data was gathered after some attempts. The process of mutating of the parsed_data were also very time consuming, because the focus is to only collect the name of the Prime Ministers, as that column also contains other information like their Constituency, Year alive, and Title therefore a removal of these unwanted details were applied.

The project became fun during the data clean process, which includes the said mutating process. This challenges my ability to prepare a presentable data, where being proactive in finding and removing unwanted details and keeping the necessary ones helps to develop an intuition in data cleaning. Then putting the prepared data set into a graph also challenges my ability to create a tidy and well presented graph containing data that I've thoroughly reorganized.

To improve, I would use a more efficient method in data cleaning to reduce the time consuming parts of that stage. On some parts, I manually removed unwanted rows and altered the birth years and lifespan values because it resulted in NA when it shouldn't. This issue happened to about 5 rows, which therefore I decided manually mutate these rows however, if there were more rows that needed alterations, I would result with using another method which offers a more efficient effect.

### [References]{.underline}

Wikipedia contributors. (2024, January 15). List of prime ministers of New Zealand. In *Wikipedia, The Free Encyclopedia*. Retrieved 18:59, February 5, 2024, from <https://en.wikipedia.org/w/index.php?title=List_of_prime_ministers_of_New_Zealand&oldid=1195831308>

```         
R Core Team (2021). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria.
https://www.R-project.org/.
```

```         
 Wickham H (2021). _babynames: US Baby Names 1880-2017_. R package version 1.0.1,
  <https://github.com/hadley/babynames>.
```

```         
Wickham H, Hester J, Ooms J (2023). _xml2: Parse XML_. R package version 1.3.6,
  https://github.com/r-lib/xml2, <https://xml2.r-lib.org/>.
```

```         
Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G,
  Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K,
  Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K,
  Yutani H (2019). “Welcome to the tidyverse.” _Journal of Open Source Software_,
  *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.
```

```         
  Wickham H (2022). _rvest: Easily Harvest (Scrape) Web Pages_. R package version
  1.0.3, https://github.com/tidyverse/rvest, <https://rvest.tidyverse.org/>.
```

```         
Firke S (2023). _janitor: Simple Tools for Examining and Cleaning Dirty Data_. R
  package version 2.2.0, https://sfirke.github.io/janitor/,
  <https://github.com/sfirke/janitor>.
```

```         
Wickham H, François R, Henry L, Müller K, Vaughan D (2023). _dplyr: A Grammar of
  Data Manipulation_. R package version 1.1.4, https://github.com/tidyverse/dplyr,
  <https://dplyr.tidyverse.org>.
```

```         
Wickham H, Vaughan D, Girlich M (2023). _tidyr: Tidy Messy Data_. R package
  version 1.3.0, https://github.com/tidyverse/tidyr, <https://tidyr.tidyverse.org>.
```

```         
Xie Y (2023). _knitr: A General-Purpose Package for Dynamic Report Generation in
  R_. R package version 1.45, <https://yihui.org/knitr/>.

  Yihui Xie (2015) Dynamic Documents with R and knitr. 2nd edition. Chapman and
  Hall/CRC. ISBN 978-1498716963

  Yihui Xie (2014) knitr: A Comprehensive Tool for Reproducible Research in R. In
  Victoria Stodden, Friedrich Leisch and Roger D. Peng, editors, Implementing
  Reproducible Computational Research. Chapman and Hall/CRC. ISBN 978-1466561595
```
